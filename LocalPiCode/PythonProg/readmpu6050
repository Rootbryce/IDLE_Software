import smbus
from time import sleep
import socket
import time
import os
import shutil
import subprocess
import RPi.GPIO as GPIO
import random
from git import Repo

i = 0
    

# Function for checking if wifi is connected so that auto-run on boot will work:
def checkIfWifiConnected(IP, Port, PSocket):
    try:
        PSocket.bind((IP,Port)) # binding the IP and port, the two (()) are important idk why lol
    except:
        print("Waiting for Wifi")
    else:
        return True
        
# Clear out local folder with IDLE code, then clone fresh copy of github repo
# try:
#     shutil.rmtree('/home/idle/IDLE_software')
# except:
#     print("IDLE_software folder is empty, continuting to clone github repo")
# 
# Repo.clone_from("https://github.com/Rootbryce/IDLE_Software.git", "/home/idle/IDLE_software")
    
# This function is called by UDP_Data.py which then sends the data via UDP communication to the Ground Station!
#def READ_DATA():
    
# This block of code is taken from a website
#some MPU6050 Registers and their Address
# PWR_MGMT_1   = 0x6B
# SMPLRT_DIV   = 0x19
# CONFIG       = 0x1A
# GYRO_CONFIG  = 0x1B
# INT_ENABLE   = 0x38
# ACCEL_XOUT = 0x3B
# ACCEL_YOUT = 0x3D
# ACCEL_ZOUT = 0x3F
# GYRO_XOUT  = 0x43
# GYRO_YOUT  = 0x45
# GYRO_ZOUT  = 0x47


bus = smbus.SMBus(1) # or bus = smbus.SMBus(0) for older version boards
Device_Address = 0x68 # MPU6050 device address

buffer = 1024
ServerPort = 2222
ServerIP = '172.20.10.7'
PSock = socket.socket(socket.AF_INET,socket.SOCK_DGRAM) # using UDP

PSock.bind((ServerIP,ServerPort))

# for i in range(20):
#     if(checkIfWifiConnected(ServerIP, ServerPort, PSock)):
#         break
#     sleep(1)

print('Server is working and listening...')
command,address = PSock.recvfrom(buffer) # waiting unit Pi connects with client 
command = command.decode('utf-8')
print(command)
print('Client Address: ', address[0])


# def MPU_Init():
#     
#     #write to sample rate register
#     bus.write_byte_data(Device_Address, SMPLRT_DIV, 7)
# 
#     #Write to power management register
#     bus.write_byte_data(Device_Address, PWR_MGMT_1, 1)
# 
#     #Write to Configuration register
#     bus.write_byte_data(Device_Address, CONFIG, 0)
# 
#     #Write to Gyro configuration register
#     bus.write_byte_data(Device_Address, GYRO_CONFIG, 24)
# 
#     #Write to interrupt enable register
#     bus.write_byte_data(Device_Address, INT_ENABLE, 1)
# 
# def read_raw_data(addr):
#     #Accelero and Gyro value are 16-bit
#     high = bus.read_byte_data(Device_Address, addr)
#     low = bus.read_byte_data(Device_Address, addr+1)
#     
#     #concatenate higher and lower value
#     value = ((high << 8) | low)
#         
#     #to get signed value from mpu6050
#     if(value > 32768):
#         value = value - 65536
#     return value
    

#MPU_Init()


# def checkForConnection():
#     try:
#         read_raw_data(ACCEL_XOUT)
#     except:
#         return False
    
#     return True


# while True:
#     if (checkForConnection()): ## Change "False" into appropriate condition, basically checking for if connection is established thru I2C
#         #Read Accelerometer raw value
#         acc_x = read_raw_data(ACCEL_XOUT)
#         acc_y = read_raw_data(ACCEL_YOUT)
#         acc_z = read_raw_data(ACCEL_ZOUT)
# 
#         #Read Gyroscope raw value
#         gyro_x = read_raw_data(GYRO_XOUT)
#         gyro_y = read_raw_data(GYRO_YOUT)
#         gyro_z = read_raw_data(GYRO_ZOUT)
#     else:
#         # Use Bogus values
#         acc_x = random.random()
#         acc_y = random.random()
#         acc_z = random.random()
# 
#         gyro_x = random.random()
#         gyro_y = random.random()
#         gyro_z = random.random()
# 
#     Ax = acc_x/16384.0
#     Ay = acc_y/16384.0 
#     Az = acc_z/16384.0
# 
#     Gx = gyro_x/131.0
#     Gy = gyro_y/131.0
#     Gz = gyro_z/131.0
# 
# #    print ("Gx=%.2f" %Gx, u'\u00b0'+ "/s", "\tGy=%.2f" %Gy, u'\u00b0'+ "/s", "\tGz=%.2f" %Gz, u'\u00b0'+ "/s", "\tAx=%.2f g" %Ax, "\tAy=%.2f g" %Ay, "\tAz=%.2f g" %Az) 	
#        
#     in_min = 1
#     in_max = -1
#     out_min = 0
#     out_max = 180
#     
#     
#     # Need to convert!
#     X_acc = (Ax - in_min) * (out_max - out_min) / (in_max - in_min) + out_min
#     Y_acc = (Ay - in_min) * (out_max - out_min) / (in_max - in_min) + out_min
#     Z_acc = (Az - in_min) * (out_max - out_min) / (in_max - in_min) + out_min
#     
#     X_acc = str(X_acc)
#     Y_acc = str(Y_acc)
#     Z_acc = str(Z_acc)
#     print(X_acc)
# 
#     #while True:
# # 
#     
#     if command == 'Start':
#         data = X_acc + ',' + Y_acc + ',' + Z_acc
#         print(data)
#         data = data.encode('utf-8')
#         PSock.sendto(data,address) # The client IP address doesn't matter because you are just accessing the server as the client and are sending your IP address
#     else:
#         data = 'Waiting for command...'
#         data = data.encode('utf-8')
#         PSock.sendto(data,address)
        
    #command_end,address = PSock.recvfrom(buffer) # waiting unit Pi connects with client
    #command_end = command_end.decode('utf-8')