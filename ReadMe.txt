IDLE_Software contains all of the software used by the Instrument for Digging in Lunar Environment through the University of Colorado, Boulder's Aerospace Engineering Science's senior project, mentored by NASA's Jet Propulsion Laboratory. The code is split into 3 main folders, called ArduinoCode, GroundStationCode, and LocalPiCode. Each folder's purpose and corresponding hardware is as follows:

Robot Overview: IDLE's computational hardware consists of an Arduino Uno, and a Raspberry Pi 3. The Raspberry Pi is the central control unit of the robot, and is responsible for wireless communications with a detached ground station, taking commands from the ground station, and relaying the commands via wired connection to the Arduino. The Arduino, receiving the commands, executes them accordingly via PWM control of a motor and linear actuator. Additionally, the Arduino collects health data and sends it back to the Raspberry Pi to be sent wirelessly to the ground station. The ground station monitors and interprets the health data sent by the Raspberry Pi, and can automatically trigger a Safe Mode command to prevent damage to the robot if certain conditions are met, such as unfavorable tilt/shifting or movement of the robot, or overheating and/or high current draw of electrical components. Otherwise, the robot is semi-automatic such that a human operator commands the robot to enter specific modes based on mission needs. A fully manual option is available to raise and lower the drum mechanism, as well as controlling the spin rate of the drum mechanism.

GroundStationCode: This folder contains software meant to be run on an external machine (e.g. laptop) that proves wireless capability for future missions where missions would be separated by vast distances. The software is a GUI developed to monitor the health of the system, determine out-of-bound states to trigger a safe mode (e.g. excessive tilt, temperature, etc.), and send manual commands if and when required. The ground station establishes a UDP link with the Raspberry Pi, and once linked, the robot is ready to begin operation.

ArduinoCode: This folder contains a single .ino file that was flashed onto the Arduino Uno. This code was responsible for sending PWM signaling to a brushless VEX motor that drove a drum-digging mechanism to collect regolith, as well as PWM signaling for a linear actuator to move said drum vertically. The Arduino file also utilizes I2C to communicate with several devices on a custom PCB, including temperature sensors and a current sensor. It is also responsible for interpreting messaging sent via UART/wired connection by the Raspberry Pi, and executing PWM signaling to the motor and linear actuator. This was done to utilize Arduino's existent documentation and ability to readily transmit PWM signals.

LocalPiCode: This folder contains mainCode.py, which threads two processes in parallel. The first process handles wireless communication with the ground station, and receives commands given by the ground station. The second process receives data wired from the Arduino, and relays it wirelessly to the ground station for interpretation. 

The misc folder contains functional chunks of code that were integrated into larger software components, but kept around for component testing. The same applies to files contained in archive folders, which may also include outdated versions of code for readily accessible versions should the need to insert modules of older code arise.
